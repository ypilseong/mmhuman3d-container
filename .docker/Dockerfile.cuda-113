# Sets the base image for subsequent instructions
ARG ARG_BUILD_FROM="nvidia/cuda:11.3.1-cudnn8-devel-ubuntu20.04"
FROM $ARG_BUILD_FROM AS builder

# Sets labels for the image
LABEL org.opencontainers.image.source="https://github.com/ypilseong/mmhuman3d-container"
LABEL org.opencontainers.image.description="mmhuman3d containers"
LABEL org.opencontainers.image.licenses="MIT"

# Setting this argument prevents interactive prompts during the build process
ARG DEBIAN_FRONTEND=noninteractive
# Updates the image and installs necessary packages
RUN apt-get update --fix-missing \
    && apt-get install -y curl wget jq sudo gosu git build-essential \
    locales locales-all fontconfig fonts-nanum \
    tzdata openssh-server \
    # Cleans up unnecessary packages to reduce image size
    && apt-get autoremove -y \
    && apt-get clean -y

# Sets Python environment variables
ENV PIP_DEFAULT_TIMEOUT 100
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Setting ARGs and ENVs for the app
ARG ARG_APP_INSTALL_ROOT="/opt"
ARG ARG_APP_DIRNAME="entelecheia"
ENV APP_INSTALL_ROOT $ARG_APP_INSTALL_ROOT
ENV APP_DIRNAME $ARG_APP_DIRNAME
ENV APP_SRC_DIR=${APP_INSTALL_ROOT}/${APP_DIRNAME}
ENV APP_VIRTUAL_ENV=${APP_INSTALL_ROOT}/.venvs/${APP_DIRNAME}
ENV PATH="$APP_VIRTUAL_ENV/bin:$PATH"
ENV APP_WORKSPACE_ROOT=${APP_INSTALL_ROOT}/workspace
ARG ARG_WORKSPACE_ROOT="/workspace"
ENV WORKSPACE_ROOT $ARG_WORKSPACE_ROOT
# Sets up the workspace for the user
RUN mkdir -p $WORKSPACE_ROOT/projects

# Sets the working directory to workspace root
WORKDIR $WORKSPACE_ROOT
# Copies scripts from host into the image
COPY ./.docker/scripts/ ./scripts/
# RUN pip install -r ./scripts/requirements-cuda-113.txt

# Sets the time zone within the container
ENV TZ="Asia/Seoul"
# Sets up the locale to en_US.UTF-8
RUN localedef -v -c -i en_US -f UTF-8 en_US.UTF-8 || true

# Setting ARGs and ENVs for user creation and workspace setup
ARG ARG_USERNAME="app"
ARG ARG_USER_UID=9001
ARG ARG_USER_GID=$ARG_USER_UID
ENV USERNAME $ARG_USERNAME
ENV USER_UID $ARG_USER_UID
ENV USER_GID $ARG_USER_GID

# Creates a non-root user with sudo privileges
RUN groupadd --gid $USER_GID $USERNAME \
    && adduser --uid $USER_UID --gid $USER_GID --force-badname --disabled-password --gecos "" $USERNAME  \
    && echo "$USERNAME:$USERNAME" | chpasswd \
    && adduser $USERNAME sudo \
    && echo "$USERNAME ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers \
    && echo "$USERNAME ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/$USERNAME \
    && chmod 0440 /etc/sudoers.d/$USERNAME

# Fixes sudo error related to core dumps
RUN echo "Set disable_coredump false" > /etc/sudo.conf

# Switches to the newly created user
USER $USERNAME

# install dotfiles
ARG ARG_USER_FULLNAME="Dev User"
ARG ARG_USER_EMAIL="dev@domain.com"
ARG ARG_GITHUB_USERNAME=""
ARG ARG_SYSTEM_HOSTNAME="dev-container"
ARG ARG_WORKSPACE_LOCATION="/"
ENV USER_FULLNAME $ARG_USER_FULLNAME
ENV USER_EMAIL $ARG_USER_EMAIL
ENV GITHUB_USERNAME $ARG_GITHUB_USERNAME
ENV SYSTEM_HOSTNAME $ARG_SYSTEM_HOSTNAME
ENV WORKSPACE_LOCATION $ARG_WORKSPACE_LOCATION

ENV DOTFILES_APPLY_ROOTMOI=0
ENV DOTFILES_USE_CODE=1
ENV DOTFILES_USE_PYTHON_TOOLS=1
ENV REMOTE_CONTAINERS=1
# ENV DOTFILES_DEBUG=1

USER $USERNAME
RUN sh -c "$(wget -qO- https://dotfiles.entelecheia.ai/install)"
# Install ffmpeg and python3.7
USER root
RUN chown --recursive "${USER_UID}:${USER_GID}" "${WORKSPACE_ROOT}"
RUN chown --recursive "${USER_UID}:${USER_GID}" "${APP_INSTALL_ROOT}"
RUN apt install -y ffmpeg
RUN apt-get install -y libreadline-gplv2-dev libncursesw5-dev libssl-dev \
    libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev libffi-dev zlib1g-dev
RUN apt-get install checkinstall 
RUN apt install -y software-properties-common
RUN add-apt-repository ppa:deadsnakes/ppa
RUN apt install -y python3.7
RUN apt install -y python3-pip
RUN apt-get install -y python3.7-distutils
RUN wget https://bootstrap.pypa.io/get-pip.py \
    && python3.7 get-pip.py \
    && python3.7 -m pip install --upgrade pip
RUN apt-get install -y python3.7-dev python3.7-venv


USER $USERNAME
# Create and activate virtual environment
RUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O Miniconda3-latest-Linux-x86_64.sh \
    && bash Miniconda3-latest-Linux-x86_64.sh -b -p /opt/conda \
    && rm Miniconda3-latest-Linux-x86_64.sh \
    && /opt/conda/bin/conda clean -i -t -p -y

# Add conda to PATH
ENV PATH /opt/conda/bin:$PATH

# Create and activate conda environment
RUN conda create -n OpenMMlab python=3.7 -y \
    && echo "source activate OpenMMlab" > ~/.bashrc \
    && conda install -n OpenMMlab ffmpeg -y \
    && conda install -n OpenMMlab pytorch==1.12.1 torchvision==0.13.1 torchaudio==0.12.1 cudatoolkit=11.3 -c pytorch -y \
    && conda install -n OpenMMlab -c fvcore -c iopath -c conda-forge fvcore iopath -y \
    && conda install -n OpenMMlab -c bottler nvidiacub -y \
    && conda install -n OpenMMlab -c pytorch3d pytorch3d -y


RUN echo 'export PATH=~/home/${USERNAME}/anaconda3/bin:$PATH' >> ~/.bashrc \
    && echo '' >> ~/.bashrc \
    && echo '# >>> conda initialize >>>' >> ~/.bashrc \
    && echo '# !! Contents within this block are managed by "conda init" !!' >> ~/.bashrc \
    && echo '__conda_setup="$("/home/${USERNAME}/anaconda3/bin/conda" "shell.bash" "hook" 2> /dev/null)"' >> ~/.bashrc \
    && echo 'if [ $? -eq 0 ]; then' >> ~/.bashrc \
    && echo '    eval "$__conda_setup"' >> ~/.bashrc \
    && echo 'else' >> ~/.bashrc \
    && echo '    if [ -f "/home/${USERNAME}/anaconda3/etc/profile.d/conda.sh" ]; then' >> ~/.bashrc \
    && echo '        . "/home/${USERNAME}/anaconda3/etc/profile.d/conda.sh"' >> ~/.bashrc \
    && echo '    else' >> ~/.bashrc \
    && echo '        export PATH="home/${USERNAME}/anaconda3/bin:$PATH"' >> ~/.bashrc \
    && echo '    fi' >> ~/.bashrc \
    && echo 'fi' >> ~/.bashrc \
    && echo 'unset __conda_setup' >> ~/.bashrc \
    && echo '# <<< conda initialize <<<' >> ~/.bashrc \
    && echo 'export CUDA_HOME=/usr/local/cuda-11.3' >> ~/.bashrc \
    && echo 'export PATH=/usr/local/cuda-11.3/bin${PATH:+:${PATH}}' >> ~/.bashrc \
    && echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-11.3/lib64/' >> ~/.bashrc \
    && echo '[ -s "/home/${USERNAME}/.oh-my-zsh/completions/_bun" ] && source "/home/${USERNAME}/.oh-my-zsh/completions/_bun"' >> ~/.bashrc \
    && echo '' >> ~/.bashrc \
    && echo '# bun' >> ~/.bashrc \
    && echo 'export BUN_INSTALL="$HOME/.bun"' >> ~/.bashrc \
    && echo 'export PATH="$BUN_INSTALL/bin:$PATH"' >> ~/.bashrc 

ENV CUDA_HOME=/usr/local/cuda-11.3
ENV PATH=/usr/local/cuda-11.3/bin${PATH:+:${PATH}}
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda-11.3/lib64

# Activate conda environment for subsequent RUN commands
SHELL ["conda", "run", "-n", "OpenMMlab", "/bin/bash", "-c"]

# Clone and install mmcv within the conda environment
RUN mkdir -p OpenMMlab/mmcv \
    && cd OpenMMlab/mmcv \
    && git clone https://github.com/open-mmlab/mmcv.git -b v1.5.3 \
    && cd mmcv \
    && pip install -r requirements.txt \
    && MMCV_WITH_OPS=1 pip install -e .

# Clone and install mmdetection within the conda environment
RUN mkdir -p OpenMMlab/mmdetection \
    && cd OpenMMlab/mmdetection \
    && git clone https://github.com/open-mmlab/mmdetection.git -b v2.25.1 \
    && cd mmdetection \
    && pip install -r requirements/build.txt \
    && pip install -v -e .

# Clone and install mmpose within the conda environment
RUN mkdir -p OpenMMlab/mmpose \
    && cd OpenMMlab/mmpose \
    && git clone https://github.com/open-mmlab/mmpose.git -b v1.1.0 \
    && cd mmpose \
    && pip install -r requirements.txt \
    && pip install -v -e .

# Clone and install mmtrack within the conda environment
RUN mkdir -p OpenMMlab/mmtrack \
    && cd OpenMMlab/mmtrack \
    && git clone https://github.com/open-mmlab/mmtracking.git -b v0.14.0 \
    && cd mmtracking \
    && pip install -r requirements/build.txt \
    && pip install -v -e .

# Clone and install mmhuman3D within the conda environment
RUN mkdir -p OpenMMlab/mmhuman3D \
    && cd OpenMMlab/mmhuman3D \
    && git clone https://github.com/ypilseong/mmhuman3d.git \
    && cd mmhuman3d \
    && pip install -r requirements.txt \
    && pip install -v -e .
USER $USERNAME

SHELL ["/bin/bash", "-c"]

CMD ["bash"]